
package jogoImpostor;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;
import java.util.Random;
import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;
import java.util.stream.IntStream;
import java.util.stream.DoubleStream;

class Main {
  public static final String RESET = "\033[0m";
  public static final String RED = "\033[31m";
  public static final String GREEN = "\033[32m";
  public static final String YELLOW = "\033[33m";
  public static final String PURPLE = "\033[35m";
  public static final String CYAN = "\033[36m";
  public static final String BOLD = "\033[1m";

  public static void main(String[]args) {
    boasVindas();
    menuOpcoes();
    jogadoresN1();
  
    //gerarDicas(null);
    //palavraJaSorteada(args, null);
    //sortearOrdemUsuarios(args);
    //iniciarVotacao(args, args, 0);
  }



  public static void boasVindas() {
    System.out.println(YELLOW + "\n #Seja bem vindo ao jogo do IMPOSTOR#" + RESET);
          System.out.println();
          System.out.println(CYAN + "‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü");
          System.out.println("‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚°ü");
          System.out.println("‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£Ø‚¢†‚£º‚£ø‚£ø‚£ø‚†ø‚†ø‚£ø‚£ø‚†ª‚¢ü‚£õ‚†ª‚£ø‚£ø‚°ø‚†ø‚†ø‚£ø‚£ø‚£ø‚°ø‚†ø‚¢ø‚£ø‚£ø‚£ø‚¢á‚†ø‚£ø‚£ø‚£ø‚†ø‚†ø‚¢ø‚£ø‚°ø‚£ø‚°ø‚†ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø");
          System.out.println("‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚°á‚£º‚°á‚£∑‚°å‚£ø‚†Ä‚£æ‚£ø‚£∑‚¢∏‚°è‚£º‚£∑‚£∂‚°å‚£ø‚£Ö‚°æ‚¢∂‚£¶‚£Ω‚£ø‚£∑‚°û‚£∂‚£ø‚£ø‚¢•‚£æ‚£∂‚£¶‚¢π‚°á‚£©‚£æ‚£∑‚£¨‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø");
          System.out.println("‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚¢∏‚£ø‚£ø‚°á‚£ø‚°á‚£ø‚°á‚£ø‚¢∞‚£Æ‚£≠‚£µ‚£ø‚£á‚†ª‚£ø‚°ø‚¢á‚£ø‚°õ‚¢ø‚£∑‚°é‚£ª‚£ø‚£ø‚£á‚¢ø‚£ø‚£ø‚°ò‚¢ø‚£ø‚†ø‚£∫‚°á‚¢Ω‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø");
          System.out.println("‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£∂‚£∂‚£æ‚£ø‚£∑‚£ø‚£∑‚£ø‚£∑‚£ø‚£æ‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚£∂‚£∂‚£ø‚£ø‚£ø‚£∂‚£∂‚£æ‚£ø‚£ø‚£ø‚£ø‚£∑‚£ø‚£ø‚£ø‚£∂‚£∂‚£æ‚£ø‚£∑‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø");
          System.out.println("‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø" + RESET);


          System.out.println("   _____     _____   ");
          System.out.println("  /     \\   /     \\  ");
          System.out.println(" | ( o o ) ( o o ) | ");
          System.out.println("  \\  --- /   \\ ---  / ");
          System.out.println("   \\____/     \\____/  ");

          System.out.println();
}

     public static void menuOpcoes() {
          Scanner ler = new Scanner(System.in);
          boolean exit = false; // controlar quando sair do loop do menu

          System.out.println(CYAN + "Digite X para ver o menu de op√ß√µes." + RESET);

          while (!exit) {
              char key = ler.next().charAt(0); // Ler o pr√≥ximo caractere digitado pelo usu√°rio

              if (key == 'x' || key == 'X') {

                      System.out.println(GREEN + "\n Menu de op√ß√µes: ‚¨áÔ∏è\n" + RESET);

                      String[] menuOptions = {
                              "üí° Regras do Jogo",
                              "üéÆ Jogar",
                              "üèÉüèª‚Äç‚ôÇÔ∏è Sair",
                      };

                      for (int i = 0; i < menuOptions.length; i++) {
                          System.out.println((i + 1) + ". " + menuOptions[i]);
                      }

                      System.out.printf("\nEscolha uma op√ß√£o: ");
                      int choice = ler.nextInt();
                      System.out.println();

                      switch (choice) {
                          case 1:
                              System.out.println(GREEN +"\n ‚óè O jogo da palavra impostora √© um jogo em que\nvoc√™ deve adivinhar a palavra falsa.");
                              System.out.println("\n ‚óè O jogo √© dividido em rodadas, cada rodadas s√£o\nsorteadas 3 palavras e cada palavra possui uma\ndica.Ser√£o 2 palavras certas e 1 errada,ou seja,\n2 dicas corretas e uma falsa.");
                              System.out.println("\n ‚óè Atrav√©s das dicas, voc√™ dar√° seus palpites de \numa das tr√™s palavras sorteadas, por√©m a ordem\nde respostas de cada jogador ser√° sorteada a\ncada rodada.");
                              System.out.println("\n ‚óè Se voc√™ tiver maior pontua√ß√£o, vence o jogo." + RESET);
                              System.out.println(YELLOW + BOLD + "\n ‚óè ‚ö†Ô∏è Observa√ß√£o: Se voc√™ n√£o souber a palavra e for\no primeiro a ser selecionado a dar o palpite,\nvoc√™ pode digitar qualquer palavra sorteada\nsupostamente a certa e o jogador seguinte\nperder√° a chance de dar o palpite correto,\ne voc√™ poder√° ganhar a rodada." + RESET);
                              break;

                          case 2:
                          System.out.println(GREEN + "Iniciando o jogo..." + RESET);
                          List<String> jogadores = jogadoresN1();
                          iniciarJogo1(jogadores);
                          break;
                          case 3:
                             System.out.println(RED + "Saindo..." + RESET);
                                break;
                          default:
                              System.out.println(RED + "\nOp√ß√£o inv√°lida. Tente novamente."+RESET);
                              System.out.println(PURPLE + "¬Ø\\(„ÉÑ)/¬Ø" + RESET);
                              break;
                      }     
                  } else {
                      System.out.println(GREEN + "Digite X para ver o menu de op√ß√µes." + RESET);

          }
          }
          }

        public static List<String> jogadoresN1() {
            Scanner ler = new Scanner(System.in);

            System.out.print("Quantos jogadores ir√£o participar? ");
            int numJogadores = ler.nextInt();
            ler.nextLine(); // Limpar o buffer do scanner

            List<String> jogadores = new ArrayList<>();
            for (int i = 0; i < numJogadores; i++) {
                System.out.print("Nome do jogador " + (i + 1) + ": ");
                String nome = ler.nextLine();
                jogadores.add(nome);
            }
            return jogadores; // Retorna a lista de jogadores
        }
              

        public static void iniciarJogo1(List<String> jogadores) {
          Random random = new Random();
          Scanner ler = new Scanner(System.in);
          Map<String, Integer> pontuacao = new HashMap<>();

          // Inicializa a pontua√ß√£o de todos os jogadores como zero
          for (String jogador : jogadores) {
              pontuacao.put(jogador, 0);
          }
          System.out.println(GREEN + "\n Jogo em andamento" + RESET);
          int totalPontos = 6;
          for (int i = 0; i < totalPontos; i++) {
              System.out.print(".");
              try { //exce√ß√£o
                  TimeUnit.SECONDS.sleep(1);
              } catch (InterruptedException e) {//captura a exce√ßao
                  e.printStackTrace();//mostra aonde ocorreu a exce√ß√£o
              }
          }
        // Sorteio da ordem dos jogadores (adentro do m√©todo iniciarJogo1)

        for (int round = 0; round < 4; round++) {
          
        System.out.println(YELLOW + "\n Categorias: \n"+RESET);
        System.out.println("1. Animais");
        System.out.println("2. Objetos");
        System.out.println("3. Profiss√µes");
        System.out.println();

        System.out.println(PURPLE + "Escolha uma op√ß√£o: "+ RESET);
        int escolhaCategoria = ler.nextInt();

        String[] palavrasAnimais = {"üêà gato", "üê∂ cachorro", "üêò elefante", "ü¶Å le√£o", "üêÖ tigre"};
        String[] palavrasObjetos = {"mesa", "ü™ë cadeira", "üñ•Ô∏è computador", "üì∫ televis√£o", "üöó carro"};
        String[] palavrasProfissoes = {"üë®‚Äç‚öïÔ∏è m√©dico", "üë®‚Äçüè´ professor", "üë∑ engenheiro", "‚Äç‚öñÔ∏è‚Äçüìù advogado", "üßë‚Äç‚úàÔ∏è piloto"};

        String[] palavrasEscolhidas = null;
          switch (escolhaCategoria) {
                case 1:
                    palavrasEscolhidas = palavrasAnimais;
                    System.out.println(CYAN +"Voc√™ escolheu a categoria: Animais"+RESET);

                    break;
                case 2:
                    palavrasEscolhidas = palavrasObjetos;
                    System.out.println(CYAN +"Voc√™ escolheu a categoria: Objetos"+RESET);

                    break;
                case 3:
                    palavrasEscolhidas = palavrasProfissoes;
                    System.out.println(CYAN +"Voc√™ escolheu a categoria: Profiss√µes"+RESET);

                    break;
                default:
                    System.out.println(CYAN +"Op√ß√£o inv√°lida. Tente novamente..."+RESET);
                    System.out.println(RED + "¬Ø\\(„ÉÑ)/¬Ø"+RESET);
                    break;
          }

          // Sorteio da ordem dos jogadores a cada rodada
          Collections.shuffle(jogadores);
          System.out.println("\nA ordem de vota√ß√£o para a rodada " + (round + 1) + " ser√°:");
          for (int i = 0; i < jogadores.size(); i++) {
              System.out.println((i + 1) + ". " + jogadores.get(i));
          }
          
              System.out.println("\nRodada " + (round + 1) + GREEN + "\nSorteando palavras" + RESET);
              for (int i = 0; i < 3; i++) {
                  try {
                      TimeUnit.SECONDS.sleep(1);
                      System.out.print(".");
                  } catch (InterruptedException e) {
                      e.printStackTrace();
                  }
      }
          // Sorteio das palavras
          for (int i = 0; i < 3; i++) {
              int indiceAleatorio = random.nextInt(palavrasEscolhidas.length);
              String palavraSorteada = palavrasEscolhidas[indiceAleatorio];


        }
                    // Sorteio da palavra falsa (sem mostrar para o usu√°rio)
                    int indiceFalso = random.nextInt(3);

                    System.out.println("\nUma das palavras √© falsa! Descubra qual:");
                    for (int i = 0; i < 3; i++) {
                        String palavra = palavrasEscolhidas[i]; 
                        System.out.println("Palavra " + (i + 1) + ": " + palavra); // Exibe sem marcar a falsa
                    }
          // Dicas sobre a palavra falsa
            System.out.println("\nDicas:");
            for (int i = 0; i < 3; i++) {
                String palavra = palavrasEscolhidas[i]; // Movendo a declara√ß√£o para c√°
                String dica = "";

            if (i == indiceFalso) {
                    // Dica para a palavra falsa (invertida ou caracter√≠stica que n√£o se aplica)
                    switch (escolhaCategoria) {
                        case 1: // Animais
                            switch (palavra) {
                                case "üêà gato":
                                    dica = "N√£o late."; // Inverte a caracter√≠stica do cachorro
                                    break;
                                case "üê∂ cachorro":
                                    dica = "N√£o mia."; // Inverte a caracter√≠stica do gato
                                    break;
                                case "üêò elefante":
                                    dica = "N√£o tem pesco√ßo comprido."; // Caracter√≠stica da girafa
                                    break;
                                case "ü¶Å le√£o":
                                    dica = "N√£o vive em bandos."; // Caracter√≠stica dos lobos
                                    break;
                                case "üêÖ tigre":
                                    dica = "N√£o tem pintas."; // Caracter√≠stica da on√ßa
                                    break;
                            }
                            break;
                        case 2: // Objetos
                            switch (palavra) {
                                case "mesa":
                                    dica = "N√£o √© usado para sentar."; // Caracter√≠stica da cadeira
                                    break;
                                case "ü™ë cadeira":
                                    dica = "N√£o √© usado para comer."; // Caracter√≠stica da mesa
                                    break;
                                case "üñ•Ô∏è computador":
                                    dica = "N√£o √© usado para assistir filmes."; // Caracter√≠stica da televis√£o
                                    break;
                                case "üì∫ televis√£o":
                                    dica = "N√£o √© usado para digitar."; // Caracter√≠stica do computador
                                    break;
                                case "üöó carro":
                                    dica = "N√£o √© usado para transporte p√∫blico."; // Caracter√≠stica do √¥nibus
                                    break;
                            }
                            break;
                        case 3: // Profiss√µes
                            switch (palavra) {
                                case "üë®‚Äç‚öïÔ∏è m√©dico":
                                    dica = "N√£o constr√≥i casas."; // Caracter√≠stica do engenheiro
                                    break;
                                case "üë®‚Äçüè´ professor":
                                    dica = "N√£o pilota avi√µes."; // Caracter√≠stica do piloto
                                    break;
                                case "üë∑ engenheiro":
                                    dica = "N√£o defende clientes em tribunais."; // Caracter√≠stica do advogado
                                    break;
                                case "‚Äç‚öñÔ∏è‚Äçüìù advogado":
                                    dica = "N√£o receita medicamentos."; // Caracter√≠stica do m√©dico
                                    break;
                                case "üßë‚Äç‚úàÔ∏è piloto":
                                    dica = "N√£o ensina alunos."; // Caracter√≠stica do professor
                                    break;
                            }
                            break;
                    } // Fim do switch (escolhaCategoria)
                } else {
                    // Se n√£o for a palavra falsa, n√£o exibe dica
                    dica = ""; 
                }

                if (!dica.isEmpty()) { // S√≥ exibe se a dica n√£o estiver vazia
                    System.out.println("Dica " + (i + 1) + ": " + dica);
                }
            } // Fim do for
          // Vota√ß√£o com base na ordem sorteada
          boolean palavraFalsaAdivinhada = false;
          for (String jogador : jogadores) { // Itera na ordem sorteada
              System.out.println("\nVez de " + jogador + " votar:");
              System.out.print("Em qual palavra voc√™ acha que est√° a impostora? (1, 2 ou 3): ");
              int voto = ler.nextInt();
              while (voto < 1 || voto > 3) {
                  System.out.println(RED + "Voto inv√°lido. Escolha 1, 2 ou 3." + RESET);
                  System.out.print("Em qual palavra voc√™ acha que est√° a impostora? (1, 2 ou 3): ");
                  voto = ler.nextInt();
              }
              if (voto - 1 == indiceFalso) {
                  System.out.println(GREEN + "Parab√©ns, " + jogador + "! Voc√™ acertou!" + RESET);
                  pontuacao.put(jogador, pontuacao.get(jogador) + 1);
                  palavraFalsaAdivinhada = true;
                  break; // Sai do loop de vota√ß√£o, pois a palavra falsa foi encontrada
              } else {
                  System.out.println(RED + "Que pena, " + jogador + "! Voc√™ errou." + RESET);
              }
          }
            // Revela a palavra falsa ao final da rodada
            System.out.println(YELLOW + "\nA palavra falsa era: " + palavrasEscolhidas[indiceFalso] + RESET);

          // Fim do jogo: determinar o vencedor e o perdedor
          System.out.println(GREEN + "\nFim do jogo!\n" + RESET);
          // Verifica se algu√©m pontuou
          boolean alguemPontuou = pontuacao.values().stream().anyMatch(pontos -> pontos > 0);

          if (alguemPontuou) {
              List<Map.Entry<String, Integer>> listaPontuacao = new ArrayList<>(pontuacao.entrySet());
              listaPontuacao.sort(Map.Entry.comparingByValue(Comparator.reverseOrder())); // Ordena por pontua√ß√£o decrescente

              String vencedor = listaPontuacao.get(0).getKey();
              int maiorPontuacao = listaPontuacao.get(0).getValue();
              System.out.println(GREEN + "Vencedor: " + vencedor + " com " + maiorPontuacao + " pontos!" + RESET);

              String perdedor = listaPontuacao.get(listaPontuacao.size() - 1).getKey();
              int menorPontuacao = listaPontuacao.get(listaPontuacao.size() - 1).getValue();
              System.out.println(RED + "Perdedor: " + perdedor + " com " + menorPontuacao + " pontos." + RESET);
          } else {
              System.out.println(YELLOW + "Ningu√©m acertou nenhuma palavra falsa. N√£o houve vencedor!" + RESET);
          }
        

        }
       System.out.println("Obrigado por jogar!");
    
      
  }
}
